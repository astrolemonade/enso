from Standard.Base import Boolean, True, False, Nothing, Vector, Number, Any, Error
from Standard.Base.Data.Vector import Empty_Error

import Standard.Base.Data.Ordering.Comparator

polyglot java import org.enso.base.statistics.SingleValue
polyglot java import org.enso.base.statistics.CountMinMax

type Statistic
    ## PRIVATE
       Convert the Enso Statistic into Java equivalent
    to_java : SingleValue
    to_java = case this of
        Sum -> SingleValue.SUM
        Mean -> SingleValue.MEAN
        Variance p -> if p then SingleValue.VARIANCE_POPULATION else SingleValue.VARIANCE
        Standard_Deviation p -> if p then SingleValue.STANDARD_DEVIATION_POPULATION else SingleValue.STANDARD_DEVIATION
        Skew p -> if p then SingleValue.SKEW_POPULATION else SingleValue.SKEW
        _ -> Nothing

    ## Count the number of non-Nothing values
    type Count

    ## The minimum value
    type Minimum

    ## The maximum value
    type Maximum

    ## Sum the non-Nothing values
    type Sum

    ## The sample mean of the values
    type Mean

    ## The variance of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Variance (population:Boolean=False)

    ## The standard deviation of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Standard_Deviation (population:Boolean=False)

    ## The skew of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Skew (population:Boolean=False)

## PRIVATE
   Compute Enso Based Statistics
count_min_max : Vector -> [Any]
count_min_max data =
    invalid c = if c.is_nothing then True else (if c.is_a Number then c.is_nan else False)
    min v c = if c.is_nothing then v else (Vector.handle_incomparable_value (if v < c then v else c))
    max v c = if c.is_nothing then v else (Vector.handle_incomparable_value (if v > c then v else c))

    0.up_to data.length . fold [0, Nothing, Nothing] acc->idx->
        val = data.at idx
        if invalid val then acc else
            [acc.first + 1, min val acc.second, max val (acc.at 2)]

## Compute a single statistic on a vector like object.

   Arguments:
   - data: Vector like object which has a `to_array` method.
   - statistic: Statistic to calculate.
compute : Vector -> Statistic -> Any
compute data statistic=Count =
    here.compute_bulk data [statistic] . first


## Compute a set of statistics on a vector like object.

   Arguments:
   - data: Vector like object which has a `to_array` method.
   - statistics: Set of statistics to calculate.
compute_bulk : Vector -> [Statistic] -> [Any]
compute_bulk data statistics=[Count, Sum] =

    count_min_max = statistics.any s->((s.is_a Count) || (s.is_a Minimum) || (s.is_a Maximum))

    java_stats = statistics.map .to_java
    single_value = java_stats.any s->s.is_nothing.not

    empty_wrapper = if data.length == 0 then Error.throw Empty_Error else _

    empty_wrapper <|
        count_min_max_values = if count_min_max then here.count_min_max data else Nothing
        stats_array = if single_value then SingleValue.compute data.to_array java_stats.to_array else Nothing

        statistics.map_with_index i->s->case s of
            Count -> count_min_max_values.at 0
            Minimum -> count_min_max_values.at 1
            Maximum -> count_min_max_values.at 2
            _ -> stats_array.at i

## Compute a single statistic on the vector.

   Arguments:
   - statistic: Statistic to calculate.
Vector.Vector.compute : Vector -> Statistic -> Any
Vector.Vector.compute statistic=Count =
    this.compute_bulk [statistic] . first


## Compute statistics on the vector.

   Arguments:
   - statistics: Set of statistics to calculate.
Vector.Vector.compute_bulk : [Statistic] -> [Number]
Vector.Vector.compute_bulk statistics=[Count, Sum] =
    here.compute_bulk this statistics
