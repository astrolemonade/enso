private

import project.Any.Any
import project.Data.Array.Array
import project.Data.Map.Map
import project.Data.Maybe.Maybe
import project.Data.Numbers.Integer
import project.Data.Range.Range
import project.Data.Vector.Map_Error
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Additional_Warnings
import project.Errors.Common.Index_Out_Of_Bounds
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Nothing.Nothing
import project.Random.Random
import project.Runtime
import project.Runtime.Ref.Ref
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True
from project.Data.Filter_Condition import unify_condition_or_predicate, unify_condition_predicate_or_element
from project.Data.Index_Sub_Range import Index_Sub_Range, drop_helper, take_helper
from project.Data.Ordering import Comparable
from project.Data.Range.Extensions import all

## PRIVATE
new_array_proxy_builtin : Integer -> (Integer -> Any) -> Array
new_array_proxy_builtin length at = @Builtin_Method "Array_Like_Helpers.new_array_proxy_builtin"

## PRIVATE
new_vector_builder : Integer -> Any
new_vector_builder capacity = @Builtin_Method "Array_Like_Helpers.new_vector_builder"

## PRIVATE
length : (Array | Vector) -> Integer
length array_like = @Builtin_Method "Array_Like_Helpers.length"

## PRIVATE
at : (Array | Vector) -> Integer -> Any
at array_like index = @Builtin_Method "Array_Like_Helpers.at"

## PRIVATE
vector_to_array : (Vector | Array) -> Array
vector_to_array array_like = @Builtin_Method "Array_Like_Helpers.vector_to_array"

## PRIVATE
vector_from_function_primitive : Integer -> (Integer -> Any) -> Vector Any
vector_from_function_primitive length constructor = @Builtin_Method "Array_Like_Helpers.vector_from_function"

## PRIVATE
   Construct a Vector by mapping a function over 0..length-1.

   ! Error Conditions

     Errors and Warnings that arise when executing the function are wrapped in
     `Map_Error`.

     Only `MAX_MAP_WARNINGS` number of warnings are attached to result values.
     After that, the warnings are dropped, but a count of the additional
     warnings is attached in an `Additional_Warnings` warning.

   ? Problem Handling

     The result of Errors thrown when executing the function depend on `on_problems`:
     - Report_Error: The first error is thrown, and is wrapped in
       `Map_Error`.
     - No_Wrap: The first error is thrown, and is not wrapped in
       `Map_Error`.
     - Report_Warning: The result for that element is `Nothing`, 
       the error is attached as a warning. Currently unimplemented.
     - Ignore: The result is `Nothing`, and the error is
       ignored.
vector_from_function : Integer -> (Integer -> Any) -> Problem_Behavior | No_Wrap -> Vector Any
vector_from_function length function on_problems=Problem_Behavior.Report_Error =
    num_errors = Ref.new 0
    wrapped_function i =
        result = function i
        if result.is_error.not then result else
            case on_problems of
                Problem_Behavior.Ignore ->
                    Nothing
                Problem_Behavior.Report_Error ->
                    result.catch_primitive caught->
                        Error.throw (Map_Error.Error i caught)
                No_Wrap -> result
                Problem_Behavior.Report_Warning ->
                    with_error_maybe = if num_errors.get >= MAX_MAP_WARNINGS then Nothing else
                        result.catch_primitive caught->
                            Warning.attach caught Nothing
                    num_errors.modify (_+1)
                    with_error_maybe
    results = vector_from_function_primitive length wrapped_function
    if num_errors.get <= MAX_MAP_WARNINGS then results else
        err = Additional_Warnings.Error num_errors.get-MAX_MAP_WARNINGS
        Warning.attach err results

## PRIVATE
   The maximum number of warnings attached to result values in
   `vector_from_function`.
MAX_MAP_WARNINGS = 10

## PRIVATE
   Creates a new vector where for each range, a corresponding section of the
   source vector is added to the result.

   Assumes that the ranges have been already bounds-checked (for example by
   passing them through `resolve_ranges`).
slice_ranges vector ranges =
    if ranges.length == 0 then [] else
        if ranges.length != 1 then slice_many_ranges vector ranges else
            case ranges.first of
                _ : Integer -> [vector.at ranges.first]
                Range.Between start end step -> case step == 1 of
                    True -> vector.slice start end
                    False -> slice_many_ranges vector ranges

## PRIVATE
   See `slice_ranges`.
slice_many_ranges vector ranges =
    new_length = ranges.fold 0 acc-> descriptor-> case descriptor of
        _ : Integer -> acc+1
        _ : Range -> acc+descriptor.length
    builder = Vector.new_builder new_length
    ranges.each descriptor-> case descriptor of
        _ : Integer ->
            builder.append (vector.at descriptor)
        Range.Between start end step -> case step == 1 of
            True ->
                builder.append_vector_range vector start end
            False ->
                descriptor.each ix->
                    builder.append (vector.at ix)
    builder.to_vector

## PRIVATE
check_start_valid start length function =
    used_start = if start < 0 then start + length else start
    if used_start < 0 || used_start > length then Error.throw (Index_Out_Of_Bounds.Error start length+1) else
        function used_start

## PRIVATE
sort vector order on by on_incomparable =
    comps = case on == Nothing of
        True -> vector.map it-> Comparable.from it
        False -> vector.map it-> Comparable.from (on it)
    compare_funcs = comps.map (it-> it.compare)
    vector.sort_builtin order.to_sign comps compare_funcs by on on_incomparable.to_number

## PRIVATE
distinct vector on =
    builder = Vector.new_builder
    result = vector.fold Map.empty existing->
        item->
            key = on item
            if (existing.get key False) then existing else
                builder.append item
                existing.insert key True
    if result.is_error then result else builder.to_vector

## PRIVATE
take vector range = case range of
    ## We are using a specialized implementation for `take Sample`, because
       the default implementation (which needs to be generic for any
       collection) generates a random set of indices and then selects these
       indices, but we can sample the vector directly.
    Index_Sub_Range.Sample count seed ->
        rng = Random.new_generator seed
        rng.items vector count
    _ ->
        take_helper vector.length (vector.at _) vector.slice (slice_ranges vector) range

## PRIVATE
drop vector range =
    drop_helper vector.length (vector.at _) vector.slice (slice_ranges vector) range

## PRIVATE
insert vector at item =
    self_len = vector.length
    used_index = if at < 0 then self_len + at else at
    if used_index < 0 || used_index > self_len then Error.throw (Index_Out_Of_Bounds.Error at self_len+1) else
        if used_index == self_len then vector + [item] else
            if used_index == 0 then [item] + vector else
                Vector.insert_builtin vector used_index [item]

## PRIVATE
remove vector at =
    self_len = vector.length
    used_index = if at < 0 then self_len + at else at
    if used_index >= self_len || used_index < 0 then Error.throw (Index_Out_Of_Bounds.Error at self_len) else
        Vector.remove_builtin vector used_index

## PRIVATE
index_of vector condition start =
    self_len = vector.length
    check_start_valid start self_len used_start->
        predicate = unify_condition_predicate_or_element condition
        used_start.up_to vector.length . find if_missing=Nothing (i-> predicate (vector.at i))

## PRIVATE
last_index_of vector condition start =
    self_len = vector.length
    if self_len == 0 && (start==0 || start==-1) then Nothing else
        check_start_valid start self_len used_start->
            predicate = unify_condition_predicate_or_element condition
            used_start.down_to -1 . find if_missing=Nothing (i-> predicate (vector.at i))

## PRIVATE
any vector condition =
    predicate = unify_condition_or_predicate condition
    0.up_to vector.length . any (idx -> (predicate (vector.at idx)))

## PRIVATE
all vector condition =
    predicate = unify_condition_or_predicate condition
    vector.any (predicate >> .not) . not

## PRIVATE
plus vector that:(Vector | Array) = case that of
    _ : Vector -> Vector.insert_builtin vector vector.length that
    _ : Array -> plus vector (Vector.from_polyglot_array that)

## PRIVATE
find vector condition start ~if_missing =
    predicate = unify_condition_or_predicate condition
    self_len = vector.length
    check_start_valid start self_len used_start->
        found = used_start.up_to self_len . find (idx -> (predicate (vector.at idx)))
        if found.is_nothing then if_missing else vector.at found

## PRIVATE
map vector function on_problems =
    vector_from_function vector.length (function << vector.at) on_problems

## PRIVATE
flat_map vector function on_problems =
    vector.map function on_problems . flatten

## PRIVATE
flatten vector =
    # TODO move?
    Vector.flatten vector
